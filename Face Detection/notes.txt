Viola Jones Algorithm 

- Foundation for OpenCV. 
- Developed in 2001 
- Is of two stages. Training and Detection 

Detection stage 
- 1st step is change into grayscale. since it is easier for processing
- VJ algo starts looking for the face 
- Looks for features in pixels.
- it keeps looking for facial features such as eyebrows and eyes to verify it's a face. it keeps iterating forward and then downwards 
- keeps checking for eyes, eyebrows, nose and mouth. once these are detected, it shows a high potential for it to be a face 


Haar Like features
- Haar wavelet (similar to fourier transforms)
- They are the edge features, line features, four-rectangle features 
- Mouth has a black line between th~e lips - counted as line feature 
- Eyebrow darker than the forehead. - Counted as edge feature 
- part of nose maybe brighter than the rest - can be counted as edge feature
- some will be dependent on lighting, some on the subject 
- VJ algo compares the pixels to the haar like features. Takes the avg intesity of white pixels and black pixels and subtracts one from the other. Closer the difference is to 1 the better to the ideal world scenario
- VJ algo also identifies thresholds and sets them 


Integral Image 

- Same size as original image 
- Sum of values from above to the left. Values - image represented in numbers 
- reduces the number of operation for getting the sum of values 

Training Classifiers 
- Scale the image down and scale the features (Edge, Line, Four-rectangle) up 
- Need to provide lot of face images to train the Classifier for the algo to learn on features 
- Also need to provide non-face images with no faces in them. Helps in identifying false positives 

Adaptive boosting (Adaboost)

- the number of features can be huge even in a small image (around 180,000+ combinations)
- eq sample => F(x) = a1f1(x) + a2f2(x) + a3f3(x) -> a is weights. f- features (eyes, eyebrows, nose). Each feature is called weak classifier (lower on it's own). F(x) -> strong classifier. 
- Strong feature needs to be complemented on it's weaker part with another feature. 

Cascading 
-Take a sub-window across the image. 
- Look for the first feature in the list of features 
- check if it is present in the sub window 
- reject sub-window if not present and ignore 
- evaluate next feature if present in sub-window and repeat process 
